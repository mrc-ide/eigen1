% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eigen1.R
\name{eigen1}
\alias{eigen1}
\alias{eigen1_power_iteration}
\alias{eigen1_base}
\title{Compute leading eigenvalue}
\usage{
eigen1(m, ..., method = "power_iteration")

eigen1_power_iteration(
  m,
  max_iterations = 100,
  tolerance = sqrt(.Machine$double.eps),
  initial = NULL,
  ...
)

eigen1_base(m, ...)
}
\arguments{
\item{m}{A matrix or 3d array}

\item{...}{Ignored arguments}

\item{method}{Select the method to use. Currently only
"power_iteration" and "base" are supported}

\item{max_iterations}{Integer, giving the number of iterations before
giving up}

\item{tolerance}{Number, giving the required tolerance}

\item{initial}{An optional initial guess at the eigenvector. If
omitted we use a random vector}
}
\value{
A scalar real (if \code{m} is a matrix) or a vector with length
\code{dim(m)[3]} if \code{m} was a 3d array
}
\description{
Compute the leading eigenvalue for a square matrix
}
\details{
This function exposes two different methods for computing the
leading eigenvalue of a matrix. The "base" method simply uses
\link{eigen} but allows 3d arrays (returning a vector of leading
eigenvalues). The "power_iteration" method uses the power
iteration method which will work well if there is a significant
difference between the first and second eigenvalues.
}
\examples{
m <- diag(runif(10))
eigen1::eigen1(m)
max(eigen(m)$values)
}
